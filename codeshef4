Problem
You are given a binary string SS of length NN. You want to obtain a palindrome from SS by applying the following operation at most \left\lfloor \frac{N}{2} \right\rfloor⌊ 
2
N
​
 ⌋ times:

Choose an index i\;(1 \le i \le \lvert S \rvert)i(1≤i≤∣S∣), delete the character S_iS 
i
​
  from SS and concatenate the remaining parts of the string. Here \lvert S \rvert∣S∣ denotes the current length of string SS.
For example, if S =S= 11010, then applying the operation on index i=2i=2 makes S=S= 1010.

Note that after each operation, the length of the string SS decreases by one.

Find any palindrome you can obtain after the operations. It can be proved that it is always possible to obtain a palindrome from SS under the given constraints.

Here, \left\lfloor \frac{N}{2} \right\rfloor⌊ 
2
N
​
 ⌋ denotes floor division of the integer NN by 22. For example, \left\lfloor \frac{5}{2} \right\rfloor = 2⌊ 
2
5
​
 ⌋=2, \left\lfloor \frac{8}{2} \right\rfloor = 4⌊ 
2
8
​
 ⌋=4. A binary string is a string that consists of only the characters 0 and 1.





























-------------c++







#include <bits/stdc++.h>
using namespace std;

int main() {
    int tc;
    cin>>tc;
    while(tc--)
   {
   	 int n;
	    cin>>n;
	    int countzero=0,countone=0;
	    string arr;
	    cin>>arr;
	    
	    for(int i=0;i<n;i++){
	        if(arr[i]=='0')
	            countzero++;
	       else
	            countone++;
	    }
	    string ans="";
	    if(countzero<=countone)
	    {
	        for(int i=0;i<countone;i++)
	        {
	            ans+='1';
	        }
	    }
	    else
	    {
	        for(int i=0;i<countzero;i++)
	        {
	            ans+='0';
	        }
	    }
	    cout<<ans<<endl;
	        
	    
   }
   	return 0;
}
